import random
import pygame
import sys
from pygame.locals import *


# 错误码
ERR = -404
# 屏幕大小
Window_Width = 800
Window_Height = 600
# 刷新频率
Display_Clock = 15
# 一块蛇身大小
SNAKE_Size = 20
assert Window_Width % SNAKE_Size == 0
assert Window_Height % SNAKE_Size == 0
# 运动区域大小
W = int(Window_Width/SNAKE_Size)
H = int(Window_Height/SNAKE_Size)
SIZE = W * H
# 背景颜色
Background_Color = (255, 255, 255)
# 蛇头索引
Head_index = 0
# 运动方向
best_move = ERR
# 不同东西在矩阵里用不同的数字表示
FOOD = 0
FREE_PLACE = (W+1) * (H+1)
SNAKE_PLACE = 2 * FREE_PLACE
# 运动方向字典
move_directions = {
					'left': -1,
					'right': 1,
					'up': -W,
					'down': W
					}


# 关闭游戏界面
def terminate():
	pygame.quit()
	sys.exit()


# 检测玩家的按键
def Check_PressKey():
	if len(pygame.event.get(QUIT)) > 0:
		terminate()
	KeyUp_Events = pygame.event.get(KEYUP)
	if len(KeyUp_Events) == 0:
		return None
	elif KeyUp_Events[0].key == K_ESCAPE:
		terminate()
	return KeyUp_Events[0].key

# 画成绩
def draw_score(score):
	font = pygame.font.Font('myfont.ttf', 30)
	scoreSurf = font.render('得分: %s' % score, True, (0, 0, 255))
	scoreRect = scoreSurf.get_rect()
	scoreRect.topleft = (Window_Width-120, 10)
	screen.blit(scoreSurf, scoreRect)



# 获得果实位置
def Get_food_Location(snake_Coords):
	flag = True
	while flag:
		food_location = {'x': random.randint(0, W-1), 'y': random.randint(0, H-1)}
		if food_location not in snake_Coords:
			flag = False
	return food_location


# 显示果实
def Show_food(coord):
	x = coord['x'] * SNAKE_Size
	y = coord['y'] * SNAKE_Size
	apple_Rect = pygame.Rect(x, y, SNAKE_Size, SNAKE_Size)
	pygame.draw.rect(screen, (255, 255, 0), apple_Rect)


# 显示蛇
def Show_Snake(coords):
	x = coords[0]['x'] * SNAKE_Size
	y = coords[0]['y'] * SNAKE_Size
	snake_color = (200, 200, 200)  # 设置蛇身颜色
	head_color = (0, 128, 128)  # 蛇头的颜色
	Snake_head_Rect = pygame.Rect(x, y, SNAKE_Size, SNAKE_Size)
	pygame.draw.rect(screen, head_color, Snake_head_Rect)
	Snake_head_Inner_Rect = pygame.Rect(x+4, y+4, SNAKE_Size-8, SNAKE_Size-8)
	pygame.draw.rect(screen, head_color, Snake_head_Inner_Rect)
	for coord in coords[1:]:
		x = coord['x'] * SNAKE_Size
		y = coord['y'] * SNAKE_Size
		Snake_part_Rect = pygame.Rect(x, y, SNAKE_Size, SNAKE_Size)
		pygame.draw.rect(screen, snake_color, Snake_part_Rect)
		Snake_part_Inner_Rect = pygame.Rect(x+4, y+4, SNAKE_Size-8, SNAKE_Size-8)
		pygame.draw.rect(screen, snake_color, Snake_part_Inner_Rect)

# 开始信息显示
def show_start_info():
	tip = font.render('按任意键开始游戏~~~', True, (65, 105, 225))
	gamestart = pygame.image.load('gamestart.png')
	screen.blit(gamestart, (140, 30))
	screen.blit(tip, (240, 550))
	pygame.display.update()

	while True:  # 键盘监听事件
		for event in pygame.event.get():  # event handling loop
			if event.type == QUIT:
				terminate()  # 终止程序
			elif event.type == KEYDOWN:
				if (event.key == K_ESCAPE):  # 终止程序
					terminate()  # 终止程序
				else:
					return  # 结束此函数, 开始游戏


# 游戏结束信息显示
def show_gameover_info():
	tip = font.render('按Q或者ESC退出游戏, 按任意键重新开始游戏', True, (65, 105, 225))
	gamestart = pygame.image.load('gameover.png')
	screen.blit(gamestart, (60, 0))
	screen.blit(tip, (80, 300))
	pygame.display.update()

	while True:  # 键盘监听事件
		for event in pygame.event.get():  # event handling loop
			if event.type == QUIT:
				terminate()  # 终止程序
			elif event.type == KEYDOWN:
				if event.key == K_ESCAPE or event.key == K_q:  # 终止程序
					terminate()  # 终止程序
				else:
					return  # 结束此函数, 重新开始游戏



# 判断该位置是否为空
def Is_Cell_Free(idx, snake):
	location_x = idx % W
	location_y = idx // W
	idx = {'x': location_x, 'y': location_y}
	return (idx not in snake)


# 重置board
def board_reset(snake, board, food):
	temp_board = board[:]
	food_idx = food['x'] + food['y'] * W
	for i in range(SIZE):
		if i == food_idx:
			temp_board[i] = FOOD
		elif Is_Cell_Free(i, snake):
			temp_board[i] = FREE_PLACE
		else:
			temp_board[i] = SNAKE_PLACE
	return temp_board


# 检查位置idx是否可以向当前move方向运动
def is_move_possible(idx, move_direction):
	flag = False
	if move_direction == 'left':
		if idx%W > 0:
			flag = True
		else:
			flag = False
	elif move_direction == 'right':
		if idx%W < W-1:
			flag = True
		else:
			flag = False
	elif move_direction == 'up':
		if idx > W-1:
			flag = True
		else:
			flag = False
	elif move_direction == 'down':
		if idx < SIZE - W:
			flag = True
		else:
			flag = False
	return flag


# 广度优先搜索遍历整个board
# 计算出board中每个非SNAKE_PLACE元素到达食物的路径长度
def board_refresh(snake, food, board):
	temp_board = board[:]
	food_idx = food['x'] + food['y'] * W
	queue = []
	queue.append(food_idx)
	inqueue = [0] * SIZE
	found = False
	while len(queue) != 0:
		idx = queue.pop(0)
		if inqueue[idx] == 1:
			continue
		inqueue[idx] = 1
		for move_direction in ['left', 'right', 'up', 'down']:
			if is_move_possible(idx, move_direction):
				if (idx+move_directions[move_direction]) == (snake[Head_index]['x'] + snake[Head_index]['y']*W):
					found = True
				# 该点不是蛇身(食物是0才可以这样子写)
				if temp_board[idx+move_directions[move_direction]] < SNAKE_PLACE:
					if temp_board[idx+move_directions[move_direction]] > temp_board[idx]+1:
						temp_board[idx+move_directions[move_direction]] = temp_board[idx] + 1
					if inqueue[idx+move_directions[move_direction]] == 0:
						queue.append(idx+move_directions[move_direction])
	return (found, temp_board)


# 根据board中元素值
# 从蛇头周围4个领域点中选择最短路径
def choose_shortest_safe_move(snake, board):
	best_move = ERR
	min_distance = SNAKE_PLACE
	for move_direction in ['left', 'right', 'up', 'down']:
		idx = snake[Head_index]['x'] + snake[Head_index]['y']*W
		if is_move_possible(idx, move_direction) and (board[idx+move_directions[move_direction]]<min_distance):
			min_distance = board[idx+move_directions[move_direction]]
			best_move = move_direction
	return best_move


# 找到移动后蛇头的位置
def find_snake_head(snake_Coords, direction):
	if direction == 'up':
		newHead = {'x': snake_Coords[Head_index]['x'],
				   'y': snake_Coords[Head_index]['y']-1}
	elif direction == 'down':
		newHead = {'x': snake_Coords[Head_index]['x'],
				   'y': snake_Coords[Head_index]['y']+1}
	elif direction == 'left':
		newHead = {'x': snake_Coords[Head_index]['x']-1,
				   'y': snake_Coords[Head_index]['y']}
	elif direction == 'right':
		newHead = {'x': snake_Coords[Head_index]['x']+1,
				   'y': snake_Coords[Head_index]['y']}
	return newHead


# 虚拟地运行一次
def virtual_move(snake, board, food):
	temp_snake = snake[:]
	temp_board = board[:]
	reset_tboard = board_reset(temp_snake, temp_board, food)
	temp_board = reset_tboard
	food_eated = False
	while not food_eated:
		refresh_tboard = board_refresh(temp_snake, food, temp_board)[1]
		temp_board = refresh_tboard
		move_direction = choose_shortest_safe_move(temp_snake, temp_board)
		snake_Coords = temp_snake[:]
		temp_snake.insert(0, find_snake_head(snake_Coords, move_direction))
		# 如果新的蛇头正好是食物的位置
		if temp_snake[Head_index] == food:
			reset_tboard = board_reset(temp_snake, temp_board, food)
			temp_board = reset_tboard
			food_idx = food['x'] + food['y'] * W
			temp_board[food_idx] = SNAKE_PLACE
			food_eated = True
		else:
			newHead_idx = temp_snake[0]['x'] + temp_snake[0]['y'] * W
			temp_board[newHead_idx] = SNAKE_PLACE
			end_idx = temp_snake[-1]['x'] + temp_snake[-1]['y'] * W
			temp_board[end_idx] = FREE_PLACE
			del temp_snake[-1]
	return temp_snake, temp_board


# 检查蛇头和蛇尾间是有路径的
# 避免蛇陷入死路
def is_tail_inside(snake, board, food):
	temp_board = board[:]
	temp_snake = snake[:]
	# 将蛇尾看作食物
	end_idx = temp_snake[-1]['x'] + temp_snake[-1]['y'] * W
	temp_board[end_idx] = FOOD
	v_food = temp_snake[-1]
	# 食物看作蛇身(重复赋值了)
	food_idx = food['x'] + food['y'] * W
	temp_board[food_idx] = SNAKE_PLACE
	# 求得每个位置到蛇尾的路径长度
	result, refresh_tboard = board_refresh(temp_snake, v_food, temp_board)
	temp_board = refresh_tboard
	for move_direction in ['left', 'right', 'up', 'down']:
		idx = temp_snake[Head_index]['x'] + temp_snake[Head_index]['y']*W
		end_idx = temp_snake[-1]['x'] + temp_snake[-1]['y']*W
		if is_move_possible(idx, move_direction) and (idx+move_directions[move_direction] == end_idx) and (len(temp_snake)>3):
			result = False
	return result


# 根据board中元素值
# 从蛇头周围4个领域点中选择最远路径
def choose_longest_safe_move(snake, board):
	best_move = ERR
	max_distance = -1
	for move_direction in ['left', 'right', 'up', 'down']:
		idx = snake[Head_index]['x'] + snake[Head_index]['y']*W
		if is_move_possible(idx, move_direction) and (board[idx+move_directions[move_direction]]>max_distance) and (board[idx+move_directions[move_direction]]<FREE_PLACE):
			max_distance = board[idx+move_directions[move_direction]]
			best_move = move_direction
	return best_move 


# 让蛇头朝着蛇尾运行一步
def follow_tail(snake, board, food):
	temp_snake = snake[:]
	temp_board = board_reset(temp_snake, board, food)
	# 将蛇尾看作食物
	end_idx = temp_snake[-1]['x'] + temp_snake[-1]['y'] * W
	temp_board[end_idx] = FOOD
	v_food = temp_snake[-1]
	# 食物看作蛇身
	food_idx = food['x'] + food['y'] * W
	temp_board[food_idx] = SNAKE_PLACE
	# 求得每个位置到蛇尾的路径长度
	result, refresh_tboard = board_refresh(temp_snake, v_food, temp_board)
	temp_board = refresh_tboard
	# 还原
	temp_board[end_idx] = SNAKE_PLACE
	# temp_board[food_idx] = FOOD
	return choose_longest_safe_move(temp_snake, temp_board)


# 如果蛇和食物间有路径
# 则需要找一条安全的路径
def find_safe_way(snake, board, food):
	safe_move = ERR
	real_snake = snake[:]
	real_board = board[:]
	v_snake, v_board = virtual_move(snake, board, food)
	# 如果虚拟运行后，蛇头蛇尾间有通路，则选最短路运行
	if is_tail_inside(v_snake, v_board, food):
		safe_move = choose_shortest_safe_move(real_snake, real_board)
	else:
		safe_move = follow_tail(real_snake, real_board, food)
	return safe_move


# 各种方案均无效时，随便走一步，结束
def any_possible_move(snake, board, food):
	best_move = ERR
	reset_board = board_reset(snake, board, food)
	board = reset_board
	result, refresh_board = board_refresh(snake, food, board)
	board = refresh_board
	min_distance = SNAKE_PLACE
	for move_direction in ['left', 'right', 'up', 'down']:
		idx = snake[Head_index]['x'] + snake[Head_index]['y']*W
		if is_move_possible(idx, move_direction) and (board[idx+move_directions[move_direction]]<min_distance):
			min_distance = board[idx+move_directions[move_direction]]
			best_move = move_direction
	return best_move


# 运行游戏
def Run_Game():
	# 一维数组来表示蛇运动的矩形场地
	board = [0] * SIZE
	# 随机设置蛇出生地
	start_x = random.randint(5, W-6)
	start_y = random.randint(5, H-6)
	snake_Coords = [{'x': start_x, 'y': start_y},
					{'x': start_x-1, 'y': start_y},
					{'x': start_x-2, 'y': start_y}]
	# 生成果实
	food_location = Get_food_Location(snake_Coords)
	while True:
		# 监听键盘事件
		for event in pygame.event.get():
			if event.type == QUIT:
				terminate()
			elif event.type == KEYDOWN:
				if event.key == K_ESCAPE:
					terminate()
		# 设置背景颜色
		screen.fill(Background_Color)
		# 显示蛇
		Show_Snake(snake_Coords)
		# 显示食物
		Show_food(food_location)
		# 显示成绩
		draw_score(len(snake_Coords)-3)
		# 重置board
		reset_board = board_reset(snake_Coords, board, food_location)
		board = reset_board
		result, refresh_board = board_refresh(snake_Coords, food_location, board)
		board = refresh_board
		# 如果蛇可以吃到食物
		if result:
			# 可以吃到食物计算安全路径
			best_move = find_safe_way(snake_Coords, board, food_location)
		else:
			# 不可以让蛇头朝着蛇尾运行一步就转圈了
			best_move = follow_tail(snake_Coords, board, food_location)
		if best_move == ERR:
			# 返回错误，各种方案均无效时，随便走一步
			best_move = any_possible_move(snake_Coords, board, food_location)
		if best_move != ERR:
			# 找到移动后蛇头的位置，蛇移动
			newHead = find_snake_head(snake_Coords, best_move)
			snake_Coords.insert(0, newHead)
			head_idx = snake_Coords[Head_index]['x'] + snake_Coords[Head_index]['y']*W
			end_idx = snake_Coords[-1]['x'] + snake_Coords[-1]['y']*W
			# 判定蛇头是否吃到食物
			if (snake_Coords[Head_index]['x'] == food_location['x']) and (snake_Coords[Head_index]['y'] == food_location['y']):
				board[head_idx] = SNAKE_PLACE
				if len(snake_Coords) < SIZE:
					# 只要有空间就生成食物
					food_location = Get_food_Location(snake_Coords)
			else:
				# 移动
				board[head_idx] = SNAKE_PLACE
				board[end_idx] = FREE_PLACE
				del snake_Coords[-1]
		else:
			return
		pygame.display.update()
		Snake_Clock.tick(Display_Clock)


# 主函数
def main():
	global screen, font, Snake_Clock
	pygame.init()
	Snake_Clock = pygame.time.Clock()
	screen = pygame.display.set_mode((Window_Width, Window_Height))
	# 设置font
	font = pygame.font.Font('myfont.ttf', 40)
	screen.fill(Background_Color)
	# 背景音乐
	pygame.mixer.init()
	track = pygame.mixer.music.load('bgm.mp3')
	pygame.mixer.music.play()

	pygame.display.set_caption('Python 贪吃蛇小游戏')
	# 欢迎信息
	show_start_info()
	while True:
		Run_Game()
		show_gameover_info()



if __name__ == '__main__':
	main()
